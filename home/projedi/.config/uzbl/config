# === Core settings ==========================================================

set home_dir = @(echo $HOME)@
set uzbl_dir = @home_dir/.uzbl
#set cache_dir = @home_dir/.uzbl/cache
set scripts_dir  = @uzbl_dir/scripts:
set fifo_dir   = /tmp
set socket_dir = /tmp

set shell_cmd       = /bin/zsh -c

# === General config aliases =================================================

set mode_config     = request MODE_CONFIG
set on_event        = request ON_EVENT
set on_set          = request ON_SET
set modmap          = request MODMAP
set ignore_key      = request IGNORE_KEY
set toggle_modes    = request TOGGLE_MODES
set set_mode        = set mode =
set set_status      = set status_message =

# === Hardcoded handlers =====================================================

set download_handler    = sync_spawn @scripts_dir/download.sh

# === Dynamic event handlers =================================================

@on_event   NEW_WINDOW     sh 'uzbl-browser "$1"' %r
@on_event   REQ_NEW_WINDOW event NEW_WINDOW %s

@on_event   LOAD_START     @set_status <span foreground="khaki">wait</span>
@on_event   LOAD_START     @set_mode
@on_event   LOAD_COMMIT    @set_status <span foreground="green">recv</span>
@on_event   LOAD_COMMIT    js uzbl = {};
@on_event   LOAD_COMMIT    script @scripts_dir/follow.js
@on_event   LOAD_FINISH    @set_status <span foreground="gold">done</span>
@on_event   LOAD_FINISH    spawn @scripts_dir/history.sh
# Switch to insert mode if a (editable) html form is clicked
@on_event   FOCUS_ELEMENT  sh 'if [ "$1" = INPUT -o "$1" = TEXTAREA -o "$1" = SELECT ]; then echo "@set_mode insert" > $UZBL_FIFO; fi' %s
# Switch to command mode if anything else is clicked
@on_event   ROOT_ACTIVE    @set_mode command
#@on_event   SCROLL_VERT    set scroll_message = \@<(function(curr, min, max, size){if(max == size) return '--'; var p=(curr/(max - size)); return Math.round(10000*p)/100;})(%1,%2,%3,%4)>\@%

# === Behaviour and appearance ===============================================

# Custom CSS can be defined here, including link follower hint styles
set stylesheet_uri = file://@uzbl_dir/style.css

set show_status       = 1
set status_top        = 0
set status_background = #000000

set modcmd_style      = weight="bold" foreground="red"
set keycmd_style      = weight="light" foreground="red"
set prompt_style      = foreground="grey"
set cursor_style      = underline="single"
set completion_style  = foreground="green"
set hint_style        = weight="bold"

set mode_section      = <span background="khaki" foreground="black">[\@[\@mode_indicator]\@]</span>
set keycmd_section    = [<span \@prompt_style>\@[\@keycmd_prompt]\@</span><span \@modcmd_style>\@modcmd</span><span \@keycmd_style>\@keycmd</span><span \@completion_style>\@completion_list</span>]
set progress_section  = <span foreground="#606060">\@[\@progress.output]\@</span>
set uri_section       = <span foreground="#99FF66">\@[\@uri]\@</span>
set status_section    = <span foreground="orange">\@status_message</span>
set selected_section  = <span foreground="#606060">\@[\@SELECTED_URI]\@</span>

set download_section  = <span foreground="white">\@downloads</span>

set status_format       = <span font_family="monospace">@mode_section @keycmd_section @progress_section @status_section @selected_section @download_section</span>
set status_format_right = <span font_family="monospace"><span foreground="#666">uri:</span> @uri_section</span>

set title_format_long = \@keycmd_prompt \@raw_modcmd \@raw_keycmd \@TITLE - \@SELECTED_URI

# Progress bar config
# %d = done, %p = pending %c = percent done, %i = int done, %s = spinner,
# %t = percent pending, %o = int pending, %r = sprite scroll
set progress.width      = 0
set progress.format = %c
#set progress.format     = [%d>%p]%c
set progress.done       = =
set progress.pending    =

# === Useragent setup ========================================================

#Taken from xxxterm default setup
set useragent = Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.4+ (KHTML, like Gecko) Version 5.0 Safari/535.4+ 1.11.3+

# === SSL related configuration ==============================================

# Set it to certificates store of your distribution, or your own CAfile.
set ssl_ca_file = /etc/ssl/certs/ca-certificates.crt
set ssl_verify = 0
# Command to toggle ssl_verify value:
#@cbind  !ssl = chain 'toggle ssl_verify' 'reload'
# Example SSL error handler:
#@on_event   LOAD_ERROR    js var patt=new RegExp('SSL handshake failed'); if (patt.test('%3')) {alert ('%3');}

# === Key binding configuration ==============================================
# --- Internal modmapping and ignoring ---------------------------------------

#modmap <From>          <To>
@modmap <Control>       <Ctrl>
@modmap <ISO_Left_Tab>  <Shift-Tab>
@modmap <space>         <Space>
@modmap <KP_Enter>      <Enter>

#ignore_key <glob>
@ignore_key <ISO_*>
@ignore_key <Shift>
@ignore_key <Multi_key>
@ignore_key <Mod2>

# --- Bind aliases -----------------------------------------------------------

set mode_bind = request MODE_BIND

set bind      = @mode_bind global
set ibind     = @mode_bind insert
set cbind     = @mode_bind command
set ebind     = @mode_bind global,-insert

# --- Global & keycmd editing binds ------------------------------------------

# Resets keycmd and returns to default mode.
@on_event  ESCAPE    @set_mode
@on_event  ESCAPE    event KEYCMD_CLEAR
@on_event  ESCAPE    js uzbl.follow.clearHints()
@bind   <Escape>     = event ESCAPE

# Commands for editing and traversing the keycmd.
@ebind  <Return>     = event KEYCMD_EXEC_CURRENT
@ebind  <Home>       = event SET_CURSOR_POS 0
@ebind  <End>        = event SET_CURSOR_POS -1
@ebind  <Left>       = event SET_CURSOR_POS -
@ebind  <Right>      = event SET_CURSOR_POS +
@ebind  <BackSpace>  = event KEYCMD_BACKSPACE
@ebind  <Delete>     = event KEYCMD_DELETE
@ebind  <Tab>        = event START_COMPLETION
# Readline-ish bindings.
@ebind  <Ctrl>w      = event KEYCMD_STRIP_WORD \ -./&?=
@ebind  <Ctrl>u      = event SET_KEYCMD
@ebind  <Ctrl>a      = event SET_CURSOR_POS 0
@ebind  <Ctrl>e      = event SET_CURSOR_POS -1

@ebind <Up>          = event HISTORY_PREV
@ebind <Down>        = event HISTORY_NEXT
@ebind <Ctrl>r<search:>_ = event HISTORY_SEARCH %s

# --- Keyboard bindings ------------------------------------------------------
#@cbind  w            = event REQ_NEW_WINDOW
@cbind  j            = scroll vertical 20
@cbind  k            = scroll vertical -20
@cbind  h            = scroll horizontal -20
@cbind  l            = scroll horizontal 20
#@cbind  <Page_Up>    = scroll vertical -100%
#@cbind  <Page_Down>  = scroll vertical 100%
@cbind  <Ctrl>f      = scroll vertical 100%
@cbind  <Ctrl>b      = scroll vertical -100%
@cbind  <Ctrl>d      = scroll vertical 50%
@cbind  <Ctrl>u      = scroll vertical -50%
@cbind  gg           = scroll vertical begin
@cbind  G            = scroll vertical end
#@cbind  <Home>       = scroll vertical begin
#@cbind  <End>        = scroll vertical end
@cbind  ^            = scroll horizontal begin
@cbind  $            = scroll horizontal end
#@cbind  <Space>      = scroll vertical end
@cbind  ZZ                 = exit
@cbind  o<uri:>_       = uri %s
@cbind  O<uri:\@uri>_  = uri %s
@cbind  <Ctrl>o = back
@cbind <Ctrl>i = forward
#@cbind  b   = back
#@cbind  m   = forward
#@cbind  S   = stop
@cbind  r   = reload
#@cbind  R   = reload_ign_cache
@cbind  +   = zoom_in
@cbind  -   = zoom_out
@cbind  =   = set zoom_level = 1.0
@cbind  t   = toggle show_status
@cbind  /*  = search %s
@cbind  ?*  = search_reverse %s
@cbind  n   = search
@cbind  N   = search_reverse
@cbind  <Ctrl>p = hardcopy
@cbind  i        = @set_mode insert
@cbind  go<uri:>_       = event NEW_TAB %s
@cbind  x              = exit
@cbind  gC              = event CLEAN_TABS
@cbind  g<              = event FIRST_TAB
@cbind  g>              = event LAST_TAB
@cbind  gt              = event NEXT_TAB
@cbind  gT              = event PREV_TAB
@cbind  gi<index:>_     = event GOTO_TAB %s
#@cbind  <Mod1>*     = event GOTO_TAB %s

@cbind  s<DuckDuckGo:>_   = uri http://duckduckgo.com/?q=%s

@cbind  yy  = sh 'echo -n "$UZBL_URI" | xclip -sel clipboard'
@cbind  p   = sh 'echo "uri $(xclip -selection clipboard -o | sed s/\\\@/%40/g)" > "$UZBL_FIFO"'

# Link following (similar to vimperator and konqueror)
set follow_hint_keys = thsnd-rcgmvwb/;789aefijkopquxyz234
@cbind  f*  = spawn @scripts_dir/follow.sh \@< uzbl.follow("\@follow_hint_keys", "%s", 'click') >\@
@cbind  F*  = spawn @scripts_dir/follow.sh \@< uzbl.follow("\@follow_hint_keys", "%s", 'newwindow') >\@
@cbind  yf*  = spawn @scripts_dir/follow.sh \@< uzbl.follow("\@follow_hint_keys", "%s", 'returnuri') >\@ clipboard

# === Context menu items =====================================================

#menu_add Quit uzbl = exit
#menu_link_add Print Link = print \@SELECTED_URI

# === Mode configuration =====================================================

# Define some mode specific uzbl configurations.
set command  = @mode_config command
set insert   = @mode_config insert
set stack    = @mode_config stack

# Command mode config.
@command  keycmd_style        = foreground="red"
@command  status_background   = #202020
@command  mode_indicator      = Cmd
@command  keycmd_events       = 1
@command  forward_keys        = 0
@command  modcmd_updates      = 1

# Insert mode config.
@insert   status_background   = #303030
@insert   mode_indicator      = Ins
@insert   forward_keys        = 1
@insert   keycmd_events       = 0
@insert   modcmd_updates      = 0

# Multi-stage-binding mode config.
@stack    keycmd_style        = foreground="red"
@stack    status_background   = #202020
@stack    mode_indicator      = Bnd
@stack    prompt_style        = foreground="#888" weight="light"
@stack    keycmd_events       = 1
@stack    modcmd_updates      = 1
@stack    forward_keys        = 0

set default_mode = command

# === Post-load misc commands ================================================
sync_spawn_exec @scripts_dir/load_cookies.sh

# vim: set fdm=syntax:
